const { Scenes, Markup } = require('telegraf');
const { message } = require('telegraf/filters');
const moment = require('moment');

const { createEvent } = require('../models/event');
const { getOrCreateUser, incrementUserEventCount } = require('../models/user');
const { formatEvent } = require('../utils/formatters');

// Create a scene for event creation
const createEventScene = new Scenes.WizardScene(
  'create-event',
  // Step 1: Ask for event title (what)
  async (ctx) => {
    await ctx.reply("–î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ –Ω–æ–≤—É –ø–æ–¥—ñ—é! üéâ\n\n" + "–©–æ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—î–º–æ?");
    ctx.wizard.state.eventData = {};
    return ctx.wizard.next();
  },

  // Step 2: Receive title and ask for date (when)
  async (ctx) => {
    // Check if we have text
    if (!ctx.message || !ctx.message.text) {
      await ctx.reply("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–∞–∑–≤–∞ –ø–æ–¥—ñ—ó.");
      return;
    }
    
    // Save the title
    ctx.wizard.state.eventData.title = ctx.message.text;

    await ctx.reply(
      "–°—É–ø–µ—Ä! –ö–æ–ª–∏?\n\n" +
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ: DD.MM.YYYY, HH:MM\n" +
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 15.08.2025, 18:30"
    );
    return ctx.wizard.next();
  },
  
  // Step 3: Receive date and ask for location (where)
  async (ctx) => {
    // Check if we have text
    if (!ctx.message || !ctx.message.text) {
      await ctx.reply("–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ: DD.MM.YYYY, HH:MM");
      return;
    }

    // Try to parse the date
    const dateStr = ctx.message.text;
    const date = moment(dateStr, "DD.MM.YYYY, HH:mm");

    if (!date.isValid()) {
      await ctx.reply(
        "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É.\n" +
          "–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ: DD.MM.YYYY, HH:MM\n" +
          "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 15.08.2025, 18:30"
      );
      return;
    }

    // Save the date
    ctx.wizard.state.eventData.date = date.toDate();
    
    await ctx.reply(
      "–î–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è?\n\n" +
        "–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å—É, –∞–±–æ —Å–∫–∏–Ω—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è google maps, –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ –ª–æ–∫–∞—Ü—ñ—é.",
      Markup.keyboard([Markup.button.locationRequest("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é")])
        .oneTime()
        .resize()
    );
    return ctx.wizard.next();
  },

  // Step 4: Receive location and confirm event details
  async (ctx) => {
    // Check if we have location or text
    if (ctx.message.location) {
      // Save location coordinates
      ctx.wizard.state.eventData.location = {
        latitude: ctx.message.location.latitude,
        longitude: ctx.message.location.longitude,
      };
    } else if (ctx.message.text) {
      // Save location as text address
      ctx.wizard.state.eventData.location = {
        address: ctx.message.text,
      };
    } else {
      await ctx.reply(
        "–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É, –∞–±–æ —Å–∫–∏–Ω—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è google maps, –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ –ª–æ–∫–∞—Ü—ñ—é."
      );
      return;
    }

    // Save creator information
    const user = ctx.message.from;
    ctx.wizard.state.eventData.creator = {
      id: user.id,
      username: user.username,
      firstName: user.first_name,
    };

    // Set initial approval status
    ctx.wizard.state.eventData.approved = false;

    // Format the event for confirmation
    const eventPreview = formatEvent(ctx.wizard.state.eventData);

    await ctx.reply("–í—Å–µ –≤—ñ—Ä–Ω–æ?\n\n" + eventPreview, {
      parse_mode: "HTML",
      ...Markup.inlineKeyboard([
        Markup.button.callback("‚úÖ –¢–∞–∫, –≤—Å–µ –≤—ñ—Ä–Ω–æ!", "confirm_event"),
        Markup.button.callback("‚ùå –ù—ñ, —Ç—Ä–µ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏", "cancel_event"),
      ]),
    });

    return ctx.wizard.next();
  },

  // Step 5: Handle confirmation and submit for approval
  async (ctx) => {
    // This step only handles action callbacks
    return;
  }
);

// Handle event confirmation
createEventScene.action("confirm_event", async (ctx) => {
  try {
    // Store event in database
    const eventData = ctx.wizard.state.eventData;
    const savedEvent = await createEvent(eventData);

    // Update user stats
    await getOrCreateUser(eventData.creator);
    await incrementUserEventCount(eventData.creator.id);

    // Send to admin for approval
    const adminId = process.env.ADMIN_USER_ID;

    if (adminId) {
      await ctx.telegram.sendMessage(
        adminId,
        "–ù–æ–≤–∞ –ø–æ–¥—ñ—è –Ω–∞ —Ä–æ–∑–≥–ª—è–¥:\n\n" +
          formatEvent(savedEvent) +
          "\n\n" +
          "–ê–ø—Ä—É–≤?",
        {
          parse_mode: "HTML",
          ...Markup.inlineKeyboard([
            Markup.button.callback(
              `‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏`,
              `approve_${savedEvent._id}`
            ),
            Markup.button.callback(`‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏`, `decline_${savedEvent._id}`),
          ]),
        }
      );

      await ctx.answerCbQuery();
      await ctx.reply(
        "–¢–≤–æ—è –ø–æ–¥—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º! üéâ\n" +
          "–¢–∏ –æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∞–¥–º—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥—ñ—é.",
        Markup.removeKeyboard()
      );
    } else {
      console.warn(
        "Admin user ID not configured. Event approval will be skipped."
      );
      await ctx.answerCbQuery();
      await ctx.reply(
        "Your event has been created! üéâ\n" +
          "Note: Admin approval is not configured.",
        Markup.removeKeyboard()
      );
    }

    return ctx.scene.leave();
  } catch (error) {
    console.error("Error creating event:", error);
    await ctx.answerCbQuery("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó");
    await ctx.reply(
      "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
      Markup.removeKeyboard()
    );
    return ctx.scene.leave();
  }
});

// Handle event cancellation
createEventScene.action("cancel_event", async (ctx) => {
  await ctx.answerCbQuery("–ü–æ–¥—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞");
  await ctx.reply("–ü–æ–¥—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", Markup.removeKeyboard());
  return ctx.scene.leave();
});

// Handle any text input in the confirmation step
createEventScene.on("text", async (ctx, next) => {
  const step = ctx.wizard.cursor;

  // If we're at the confirmation step, remind to use buttons
  if (step === 4) {
    await ctx.reply(
      "–í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é —Ç—ñ–ª—å–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.",
      Markup.inlineKeyboard([
        Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "confirm_event"),
        Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel_event"),
      ])
    );
    return;
  }

  return next();
});

module.exports = {
  createEventScene,
};
